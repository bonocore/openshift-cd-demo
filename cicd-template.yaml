apiVersion: v1
kind: Template
metadata:
  name: cicd
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    description: Creates a simplified CI/CD infrastructure with Jenkins, nexus and Gogs
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: The CI/CD infrastructure composed of Jenkins and Gogs
parameters:
- description: Password for the Jenkins user.
  displayName: Jenkins Password
  value: password
  name: JENKINS_PASSWORD
  required: true
- description: Password for the Gogs user.
  displayName: Gogs Password
  value: password
  name: GOGS_PASSWORD
  required: true
- description: Username for PostgreSQL backend
  displayName: PostgreSQL User
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: DEV project name
  displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- description: STAGE project name
  displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: shopping-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
             // define commands
             def mvnCmd = "mvn -s configuration/cicd-settings.xml"

             stage 'Build'
             git url: 'http://gogs:3000/gogs/openshift-shopping.git'
             def v = version()
             sh "${mvnCmd} clean install -DskipTests=true"

             stage 'Test and Analysis'
             sh "${mvnCmd} test"
             step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])

             stage 'Deploy DEV'
             sh "rm -rf oc-build && mkdir -p oc-build/deployments"
             sh "cp target/openshift-shopping.war oc-build/deployments/ROOT.war"
             // clean up. keep the image stream
             sh "oc project ${DEV_PROJECT}"
             sh "oc delete bc,dc,svc,route -l app=shopping -n ${DEV_PROJECT}"
             // create build. override the exit code since it complains about exising imagestream
             sh "oc new-build --name=shopping --image-stream=jboss-eap70-openshift --binary=true --labels=app=shopping -n ${DEV_PROJECT} || true"
             // build image
             sh "oc start-build shopping --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
             // deploy image
             sh "oc new-app shopping:latest -n ${DEV_PROJECT}"
             sh "oc expose svc/shopping -n ${DEV_PROJECT}"
             stage 'Deploy STAGE'
             input message: "Promote to STAGE?", ok: "Promote"
             sh "oc scale deploymentconfig shopping --replicas=0 -n ${DEV_PROJECT}"
             sh "oc project ${STAGE_PROJECT}"
             // tag for stage
             sh "oc tag ${DEV_PROJECT}/shopping:latest ${STAGE_PROJECT}/shopping:${v}"
             // clean up. keep the imagestream
             sh "oc delete bc,dc,svc,route -l app=shopping -n ${STAGE_PROJECT}"
             // deploy stage image
             sh "oc new-app shopping:${v} -n ${STAGE_PROJECT}"
             sh "oc expose svc/shopping -n ${STAGE_PROJECT}"
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
    # Pipeline short
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: shopping-pipeline-short
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
             // define commands
             def mvnCmd = "mvn -s configuration/cicd-settings.xml"

             stage 'Build'
             git url: 'http://gogs:3000/gogs/openshift-shopping.git'
             def v = version()
             sh "${mvnCmd} clean install -DskipTests=true"
             sh "rm -rf oc-build && mkdir -p oc-build/deployments"
             sh "cp target/openshift-shopping.war oc-build/deployments/ROOT.war"
             sh "oc project ${STAGE_PROJECT}"
             sh "oc delete bc,dc,svc,route -l app=shopping-new -n ${STAGE_PROJECT}"
             // create build. override the exit code since it complains about exising imagestream
             sh "oc new-build --name=shopping-new --image-stream=jboss-eap70-openshift --binary=true --labels=app=shopping-new -n ${STAGE_PROJECT} || true"
             // build image
             sh "oc start-build shopping-new --from-dir=oc-build --wait=true -n ${STAGE_PROJECT}"
             // deploy stage image
             sh "oc new-app shopping-new:latest -n ${STAGE_PROJECT} --name shopping-new"
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
# Jenkins Master
- apiVersion: v1
  kind: Route
  metadata:
    name: jenkins
  spec:
    to:
      kind: Service
      name: jenkins
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: jenkins
      spec:
        containers:
        - capabilities: {}
          env:
          - name: JENKINS_PASSWORD
            value: ${JENKINS_PASSWORD}
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: 2Gi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ""
          name: jenkins-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: Service
  metadata:
    name: jenkins-jnlp
    labels:
      app: jenkins
  spec:
    ports:
    - name: agent
      nodePort: 0
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    name: jenkins
    labels:
      app: jenkins
  spec:
    portalIP: ""
    ports:
    - name: web
      nodePort: 0
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
# Sonatype Nexus
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Sonatype Nexus repository manager's http port
    labels:
      app: nexus
    name: nexus
  spec:
    ports:
    - name: web
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      app: nexus
      deploymentconfig: nexus
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
    port:
      targetPort: web
    to:
      kind: Service
      name: nexus
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
    tags:
    - annotations:
        description: The Nexus Docker image
        tags: nexus
      from:
        kind: DockerImage
        name: openshiftdemos/nexus:2.13.0-01
      importPolicy: {}
      name: "2.13.0-01"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
    replicas: 1
    selector:
      app: nexus
      deploymentconfig: nexus
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: nexus
          deploymentconfig: nexus
      spec:
        containers:
        - image: ' '
          imagePullPolicy: Always
          name: nexus
          ports:
          - containerPort: 8081
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 8081
              path: /content/groups/public
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 8081
              path: /content/groups/public
            timeoutSeconds: 5
          resources:
            limits:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/nexus-work
            name: nexus-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: nexus-data
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nexus
        from:
          kind: ImageStreamTag
          name: nexus:2.13.0-01
      type: ImageChange
  status: {}
# Gogs
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The Gogs server's http port
      service.openshift.io/infrastructure: "true"
    labels:
      app: gogs
    name: gogs
  spec:
    ports:
    - name: web
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: gogs
      deploymentconfig: gogs
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for gogs's http service.
    name: gogs
    labels:
      app: gogs
  spec:
    to:
      kind: Service
      name: gogs
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: gogs
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: gogs
    name: gogs
  spec:
    replicas: 1
    selector:
      app: gogs
      deploymentconfig: gogs
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.gogs.image.entrypoint: '["docker/start.sh","/bin/s6-svscan","/app/gogs/docker/s6/"]'
        labels:
          app: gogs
          deploymentconfig: gogs
      spec:
        containers:
        - image: gogs/gogs
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          name: gogs
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /data
            name: gogs-volume
          securityContext:
            privileged: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: gogs
        serviceAccountName: gogs
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: gogs-volume
    triggers:
    - type: ConfigChange
#Install gogs
- apiVersion: v1
  kind: Pod
  metadata:
    name: install-gogs
    labels:
      app: gogs
      job: install-gogs
  spec:
    containers:
    - name: oc
      image: docker.io/openshiftdemos/oc
      command: ["/bin/bash",  "/tmp/installgogs.sh"]
      volumeMounts:
      - name: script-volume
        mountPath: /tmp/
      resources:
        limits:
          memory: 128Mi
      env:
      - name: GOGS_PASSWORD
        value: ${GOGS_PASSWORD}
    volumes:
      - name: script-volume
        configMap:
          name: gogs-install
          items:
          - key: installgogs.sh
            path: installgogs.sh
    restartPolicy: Never
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: gogs-install
  data:
    installgogs.sh: |
      #!/bin/bash

      set -x

      # Use the oc client to get the url for the gogs and jenkins route and service
      GOGSSVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
      GOGSROUTE=$(oc get route gogs -o template --template='{{.spec.host}}')
      JENKINSSVC=$(oc get svc jenkins -o template --template='{{.spec.clusterIP}}')

      # Use the oc client to get the postgres and jenkins variables into the current shell
      eval $(oc env dc/jenkins --list | grep -v \#)


      # now we wait for gogs to be ready in the same way
      x=1
      oc get ep gogs -o yaml | grep "\- addresses:"
      while [ ! $? -eq 0 ]
      do
        sleep 10
        x=$(( $x + 1 ))

        if [ $x -gt 100 ]
        then
          exit 255
        fi

        oc get ep gogs -o yaml | grep "\- addresses:"
      done

      sleep 10
      # we might catch the router before it's been updated, so wait just a touch more

      RETURN=$(curl -o /dev/null -sL --post302 -w "%{http_code}" http://$GOGSSVC:3000/install \
      --form db_type=SQLite3 \
      --form db_path=data/gogs.db \
      --form "app_name=Gogs: Go Git Service" \
      --form repo_root_path=/data/git/gogs-repositories \
      --form run_user=git \
      --form domain=localhost \
      --form ssh_port=22 \
      --form http_port=3000 \
      --form app_url=http://${GOGSROUTE}/ \
      --form log_root_path=/app/gogs/log \
      --form admin_name=gogs \
      --form admin_passwd=$GOGS_PASSWORD \
      --form admin_confirm_passwd=$GOGS_PASSWORD \
      --form admin_email=admin@gogs.com)



      if [ $RETURN != "200" ]
      then
        exit 255
      fi

      sleep 10

      # import github repository
      cat <<EOF > /tmp/data.json
      {
        "clone_addr": "https://github.com/bonocore/demoOcpClustered.git",
        "uid": 1,
        "repo_name": "openshift-shopping"
      }
      EOF

      RETURN=$(curl -o /dev/null -sL -w "%{http_code}" -H "Content-Type: application/json" \
      -u gogs:$GOGS_PASSWORD -X POST http://$GOGSSVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

      if [ $RETURN != "201" ]
      then
        exit 255
      fi

      sleep 5

      # add webhook to Gogs to trigger pipeline on push
      #cat <<EOF > /tmp/data.json
      #{
      #  "type": "gogs",
      #  "config": {
      #    "url": "http://admin:$JENKINS_PASSWORD@$JENKINSSVC/job/shopping-cd-pipeline/build?delay=0sec",
      #    "content_type": "json"
      #  },
      #  "events": [
      #    "push"
      #  ],
      #  "active": true
      #}
      #EOF
      #RETURN=$(curl -o /dev/null -sL -w "%{http_code}" -H "Content-Type: application/json" \
      #-u gogs:$GOGS_PASSWORD -X POST http://$GOGSSVC:3000/api/v1/repos/gogs/openshift-shopping/hooks -d @/tmp/data.json)

      #if [ $RETURN != "201" ]
      #then
      #  exit 255
      #fi
